% read calibration data generated by asap_calibration.vi
% This file contains information about:
%  -- commanded pose
%  -- uncalibrated sensor signals

function [measured, desired, RxRyRz] = ...
    read_data_motion_v1(filename)

% measured: 
% This result data should be approximately in microns, but is not
% calibrated.  The result is a 3D array, with rows organized by
% sensor, not xyz:
%    [u1 v1 u2 v2 1]
%
% v1, v2 are the redundant z measurements.
%
% the third dimension is indexed by the light number.

% desired position (commanded pose translation, microns)
% 2D array, each row:
%    [x y z 1]

% xyz Euler angles (pose rotation, radians), 2D array, each row:
%    [Rx Ry Rz]
% 
% The angle composition order is Rz * Ry * Rx, which is compatible with the
% vision toolbox rpy2tr and tr2rpy if the angle vectors are reversed.  This
% assumes the data was taken in "Pose" mode.  If "Absolute axis" mode was
% used, then you have to deal with the actual stage kinematics.

rows = load(filename);

nread = 0;
[nread, motion_xyz_slice] = row_slicer(nread, 3);
[nread, motion_RxRyRz_slice] = row_slicer(nread, 3);

% Demodulated signals: 2 sensors * 2 axes * 2 signals/axis = 8
% signals per light
num_lights = (size(rows, 2) - nread)/8;
[nread, demod_signals_slice] = row_slicer(nread, num_lights * 8);

nrows = size(rows, 1); % number of rows

% Data file pose is in mm/degrees
desired = pad_ones(rows(:, motion_xyz_slice) * 1e3);
RxRyRz = rows(:, motion_RxRyRz_slice)*pi/180;
demod2 = rows(:, demod_signals_slice);

demod = reshape(demod2, nrows, num_lights, 2, 4);
demod = permute(demod, [1, 4, 3, 2]);
measured = ones(nrows, 5, num_lights);

% Find axis positions from the signal amplitudes using PSD formula.
for light_ix = 1:num_lights
  for axis_ix = 1:4
    a0 = demod(:, axis_ix, 1, light_ix);
    a1 = demod(:, axis_ix, 2, light_ix);
    sum = a1 + a0;
    measured(:, axis_ix, light_ix) = (a1 - a0) ./ sum;
  end
end

% Scale to sensor plane microns.
for light_ix = 1:num_lights
  measured(:, :, light_ix) = measured(:, :, light_ix) * nominal_scale;
end
